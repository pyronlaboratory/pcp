[
  {
    "name": "__init__.py",
    "path": "pcplib/__init__.py",
    "content": {
      "structured": {
        "description": "A function named `processData` that takes in data as input and performs various operations on it, including converting it into a pandas DataFrame, applying a mapping function to it, and then visualizing the results using matplotlib. The `pandas` and `matplotlib` packages are used throughout the code for data manipulation and visualization.",
        "items": []
      }
    }
  },
  {
    "name": "driver.py",
    "path": "pcplib/driver.py",
    "content": {
      "structured": {
        "description": "A class `Car` that has attributes for make, model, and fuel capacity, as well as methods for starting, driving, and stopping the car. The `calculate_efficiency` function calculates the fuel efficiency of the car based on the distance traveled and the amount of fuel used. The code also includes a main function that creates an instance of the `Car` class and prints the results of the various methods called on it.",
        "items": [
          {
            "id": "73c625ae-2661-9181-bb44-1f7437f7887b",
            "ancestors": [],
            "description": "Has methods for starting, driving and stopping a car. It also keeps track of the fuel level and provides messages based on the available fuel level.",
            "attributes": [
              {
                "name": "make",
                "type_name": "str",
                "description": "Initialized with the value of the object's `make` parameter during its initialization."
              },
              {
                "name": "model",
                "type_name": "str",
                "description": "A variable representing the name of the car's model."
              },
              {
                "name": "fuel_capacity",
                "type_name": "int",
                "description": "0 by default, representing the maximum amount of fuel that can be carried by the vehicle."
              },
              {
                "name": "fuel_level",
                "type_name": "int",
                "description": "Initialized to 0 when the object is created. It represents the amount of fuel remaining in the car."
              }
            ],
            "name": "Car",
            "location": {
              "start": 1,
              "insert": 2,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 25,
            "docLength": null
          },
          {
            "id": "f3b14b05-230f-9989-d742-747d2db2e461",
            "ancestors": [
              "73c625ae-2661-9181-bb44-1f7437f7887b"
            ],
            "description": "Class sets instance variables 'make', 'model', and 'fuelCapacity' and initializes 'fuel level' to zero.",
            "params": [
              {
                "name": "make",
                "type_name": "str",
                "description": "Assigned to instance variable `make`."
              },
              {
                "name": "model",
                "type_name": "str",
                "description": "Used to represent the name or identification of the specific vehicle model."
              },
              {
                "name": "fuel_capacity",
                "type_name": "int",
                "description": "Used to represent the maximum amount of fuel that can be stored in the vehicle's tank."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "car = Car(\"Toyota\", \"Camry\", 20)\nprint(car.make, car.model, car.fuel_capacity) # Output: Toyota Camry 20\n",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 2,
              "insert": 3,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ab532930-50dd-1194-e646-68ad9900d4b7",
            "ancestors": [
              "73c625ae-2661-9181-bb44-1f7437f7887b"
            ],
            "description": "Determines whether to allow the car to start based on the level of fuel remaining and returns appropriate messages depending on the outcome.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A message indicating whether the vehicle can be started or not."
            },
            "usage": {
              "language": "python",
              "code": "# Create a new instance of the Car class\nmy_car = Car(\"Toyota\", \"Camry\", 15)\n\n# Start the car\nstarted = my_car.start()\nprint(started) # Output: Toyota Camry started.\n\n# Drive some distance\ndriven = my_car.drive(20)\nprint(driven) # Output: Toyota Camry drove 20 kilometers.\n\n# Stop the car\nstopped = my_car.stop()\nprint(stopped) # Output: Toyota Camry stopped.\n",
              "description": ""
            },
            "name": "start",
            "location": {
              "start": 8,
              "insert": 9,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "56c637c2-e188-b3ae-f24d-7951fe188e48",
            "ancestors": [
              "73c625ae-2661-9181-bb44-1f7437f7887b"
            ],
            "description": "Determines if the vehicle can travel distance based on available fuel level. If enough fuel, it subtracts the necessary amount and returns message of successful journey. Otherwise, it returns a message indicating insufficient fuel.",
            "params": [
              {
                "name": "distance",
                "type_name": "int",
                "description": "Representing the distance to be driven by the vehicle."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A message indicating whether the car can drive a certain distance or not."
            },
            "usage": {
              "language": "python",
              "code": "# create instance of Car class\nmy_car = Car(\"Toyota\", \"Prius\", 10)\n\n# set fuel level to 5 liters\nmy_car.fuel_level = 5\n\n# drive the car for a distance of 10 kilometers\nprint(my_car.drive(10)) # Output: \"Toyota Prius drove 10 kilometers.\"\n",
              "description": ""
            },
            "name": "drive",
            "location": {
              "start": 14,
              "insert": 15,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "791d41df-5305-05be-e343-4face49d8de4",
            "ancestors": [],
            "description": "Calculates the fuel efficiency of a vehicle based on the distance traveled and the amount of fuel used. It returns a string message indicating the fuel efficiency in kilometers per liter.",
            "params": [
              {
                "name": "distance",
                "type_name": "int",
                "description": "Passed as the distance traveled by the vehicle, in kilometers."
              },
              {
                "name": "fuel_used",
                "type_name": "double",
                "description": "Representing the amount of fuel consumed by the vehicle during its journey, usually measured in liters."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "\"Fuel efficiency: {efficiency} km/liter\"."
            },
            "usage": {
              "language": "python",
              "code": "distance = 500\nfuel_used = 20\nefficiency = calculate_efficiency(distance, fuel_used)\nprint(f\"Fuel efficiency: {efficiency} km/liter\")\n# Output: Fuel efficiency: 2.5 km/liter\n",
              "description": ""
            },
            "name": "calculate_efficiency",
            "location": {
              "start": 28,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fastwalk.py",
    "path": "pcplib/fastwalk.py",
    "content": {
      "structured": {
        "description": "A function `fastwalk` that recursively traverses directories and generates a tuple of (source directory, directories, files) based on the contents of each directory. It uses the `readdir` module to read the contents of the source directory, and the `safestat` module to determine the file type of each file. The function also utilizes the `topdown` parameter to control the traversal order. The code includes the use of packages such as `os`, `readdir`, `safestat`, and `dirent`.",
        "items": [
          {
            "id": "98b8c3e7-9ea7-4687-5140-4428042f2dca",
            "ancestors": [],
            "description": "Iterates through subdirectories and files within a given source directory, recursively calling itself for each directory until all files and directories are processed. It returns an iterator over the source directory, its subdirectories, and the files within those subdirectories.",
            "params": [
              {
                "name": "sourcedir",
                "type_name": "ospathPathlike",
                "description": "Used to specify the directory to walk through, recursively listing its contents."
              },
              {
                "name": "onerror",
                "type_name": "OptionalCallable",
                "description": "Used to handle errors that may occur during the traversal of the directory tree."
              },
              {
                "name": "topdown",
                "type_name": "bool",
                "description": "Used to control the recursion depth of the function. When set to `True`, the function recursively traverses directories; when set to `False`, it only lists the top-level files in the directory."
              }
            ],
            "yields": {
              "type_name": "tuple",
              "description": "Composed of three elements: the source directory, a list of directories, and a list of files."
            },
            "name": "fastwalk",
            "location": {
              "start": 9,
              "insert": 10,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 9,
                "end": 12
              }
            },
            "item_type": "function",
            "length": 39,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "lustreapi.py",
    "path": "pcplib/lustreapi.py",
    "content": {
      "structured": {
        "description": "A module that provides functions for working with Lustre file striping. The module includes a `getstripe()` function that returns a stripe object containing information about the stripe of a given file, and a `setstripe()` function that sets the striping parameters for an existing file or creates a new empty file with specified striping parameters. The code uses the `ctypes` package to interact with the Lustre C API, and it defines various data structures and functions to work with Lustre metadata and stripes.",
        "items": [
          {
            "id": "5d21f622-2eaa-6985-1d41-d91a90537b0b",
            "ancestors": [],
            "description": "Defines a structure with fields for object ID, group ID, generation number, and index value, likely used to store user data for OST (Operating System Technology) functionality.",
            "attributes": [
              {
                "name": "_fields_",
                "type_name": "ctypesStructure",
                "description": "A list of field names and data types for the class, including \"l_object_id\", \"l_object_gr\", \"l_ost_gen\", and \"l_ost_idx\"."
              }
            ],
            "name": "lov_user_ost_data_v1",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 7,
            "docLength": null
          },
          {
            "id": "0769b52b-124b-eb92-2848-b4f391228eb7",
            "ancestors": [],
            "description": "Defines a structure for storing metadata related to user objects, including magic number, pattern, object ID, group ID, stripe size, count, and offset. It also provides an array of pointers to `lov_user_ost_data_v1` structures.",
            "attributes": [
              {
                "name": "_fields_",
                "type_name": "ctypesc_ulonglong",
                "description": "Defined as a list of field names and data types, including lmm_magic, lmm_pattern, etc."
              }
            ],
            "name": "lov_user_md_v1",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 11,
            "docLength": null
          },
          {
            "id": "8373bb68-0688-188a-0742-98b3c423b4d8",
            "ancestors": [],
            "description": "Represents a stripe of data with various attributes, including count, size, and offset. It also includes a list of object IDs for each stripe. The `isstriped` method checks if the stripe is non-empty based on its `stripecount`, `-1` indicating an empty stripe.",
            "attributes": [
              {
                "name": "lovdata",
                "type_name": "lov_user_md_v1",
                "description": "Not defined explicitly."
              },
              {
                "name": "stripecount",
                "type_name": "int",
                "description": "Initialized to -1 upon object initialization. It represents the number of stripes that an\nobject has."
              },
              {
                "name": "stripesize",
                "type_name": "int",
                "description": "0 by default, indicating that the stripe size is unknown or uninitialized."
              },
              {
                "name": "stripeoffset",
                "type_name": "int",
                "description": "Used to store a count of the number of stripes offset from the starting point of the \nobject. It helps determine if an object is striped or not."
              },
              {
                "name": "ostobjects",
                "type_name": "list",
                "description": "A container for storing object index-object id pairs."
              }
            ],
            "name": "stripeObj",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 67,
                "end": 80
              }
            },
            "item_type": "class",
            "length": 23,
            "docLength": 13
          },
          {
            "id": "847e0184-4f4a-e991-684e-5358011f6b47",
            "ancestors": [
              "8373bb68-0688-188a-0742-98b3c423b4d8"
            ],
            "description": "For the `stripeObj` class returns a string representing the stripe count, size, and offset, along with information about the objects contained within the stripe.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A string that contains information about Stripe objects including their count, size, and offset, as well as the index and ID of each object."
            },
            "name": "__str__",
            "location": {
              "start": 81,
              "insert": 82,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "b2e8102a-9bcd-10a2-6340-4b4959747948",
            "ancestors": [
              "8373bb68-0688-188a-0742-98b3c423b4d8"
            ],
            "description": "Initializes an instance of the `stripeObj` class, setting its member variables to default values.",
            "params": [],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 89,
              "insert": 90,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "77a1f9d4-484c-19b0-fe47-dfe4f71d1ad9",
            "ancestors": [
              "8373bb68-0688-188a-0742-98b3c423b4d8"
            ],
            "description": "Determines if an instance of `stripeObj` has a stripe pattern based on the value of `self.stripecount`. If the count is greater than 1 or negative, the function returns `True`, otherwise it returns `False`.",
            "params": [],
            "returns": {
              "type_name": "Boolean",
              "description": "True if the stripecount is greater than 1 or equal to -1 and False otherwise."
            },
            "name": "isstriped",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "8d2eff55-f833-35a4-7d45-afd12417ceee",
            "ancestors": [],
            "description": "Retrieves stripe information from a file and stores it in an instance of the `stripeObj` class, handling errors and skipping empty or corrupted files.",
            "params": [
              {
                "name": "filename",
                "type_name": "str",
                "description": "The file name to read the stripes from."
              }
            ],
            "returns": {
              "type_name": "StripeObject",
              "description": "A wrapper class for Lustre stripes. The object contains information such as stripe count, size, and offset."
            },
            "name": "getstripe",
            "location": {
              "start": 105,
              "insert": 106,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 105,
                "end": 114
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 9
          },
          {
            "id": "57ef9a41-169c-5698-e742-d2a403011ba5",
            "ancestors": [],
            "description": "Sets stripes on a file, captures error messages from Lustre API, and returns the file descriptor or raises an IOError if there is an issue.",
            "params": [
              {
                "name": "filename",
                "type_name": "str",
                "description": "Used to represent the name of the file to be stripped."
              },
              {
                "name": "stripeobj",
                "type_name": "llusterevent",
                "description": "Passed to the `llusteapi_file_open` function, which represents a file object with stripes. It contains information about the stripes, such as size, offset, and count."
              },
              {
                "name": "stripesize",
                "type_name": "int",
                "description": "Used to specify the size of each stripe in bytes."
              },
              {
                "name": "stripeoffset",
                "type_name": "int",
                "description": "Used to specify the offset of the stripe in the file."
              },
              {
                "name": "stripecount",
                "type_name": "int",
                "description": "1 by default, indicating that one stripe will be created for each file."
              }
            ],
            "returns": {
              "type_name": "0valued",
              "description": "0, indicating successful execution and no error."
            },
            "name": "setstripe",
            "location": {
              "start": 145,
              "insert": 147,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 146,
                "end": 172
              }
            },
            "item_type": "function",
            "length": 29,
            "docLength": 26
          },
          {
            "id": "34b13b3f-6a9e-ffa7-f44f-660f0dcd9c27",
            "ancestors": [],
            "description": "Captures stderr output from a process and provides a way to read the captured data. It creates a pipe for reading and writing, duplicates the stderr stream, and reads data from the pipe using `os.read()`.",
            "attributes": [
              {
                "name": "pipeout",
                "type_name": "int",
                "description": "Used to represent the output pipe created by os.pipe() for capturing stderr streams."
              },
              {
                "name": "pipein",
                "type_name": "int",
                "description": "Used to indicate the file descriptor for the reading end of a pipe."
              },
              {
                "name": "oldstderr",
                "type_name": "int",
                "description": "Used for restoring the original stderr file descriptor before capturing stderr output."
              },
              {
                "name": "contents",
                "type_name": "str",
                "description": "The contents of the standard error output stream read from the pipe, which can be retrieved by calling the `readData()` method."
              }
            ],
            "name": "captureStderr",
            "location": {
              "start": 202,
              "insert": 203,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 202,
                "end": 203
              }
            },
            "item_type": "class",
            "length": 22,
            "docLength": 1
          },
          {
            "id": "2b19b4ec-6793-b1b9-b44f-f9e746a35377",
            "ancestors": [
              "34b13b3f-6a9e-ffa7-f44f-660f0dcd9c27"
            ],
            "description": "Creates a pipe and redirects standard error to it, then sets a variable `contents` to a string value.",
            "params": [],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 204,
              "insert": 205,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "85b458fa-5014-21a2-644d-53a01997ddc5",
            "ancestors": [
              "34b13b3f-6a9e-ffa7-f44f-660f0dcd9c27"
            ],
            "description": "Reads data from a pipe until it reaches an end-of-file, storing the contents in a class variable `contents`.",
            "params": [],
            "returns": null,
            "name": "readData",
            "location": {
              "start": 213,
              "insert": 214,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 213,
                "end": 214
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 1
          },
          {
            "id": "d77ff7de-e490-ada1-8346-3e3348e713ba",
            "ancestors": [
              "34b13b3f-6a9e-ffa7-f44f-660f0dcd9c27"
            ],
            "description": "Evaluates whether the pipeout variable is present or not.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "1 if there is data available to be read from the pipe, and 0 otherwise."
            },
            "name": "checkData",
            "location": {
              "start": 218,
              "insert": 219,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 218,
                "end": 219
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 1
          },
          {
            "id": "a329267b-e64d-7690-3b4b-fbc5fe9ef9dc",
            "ancestors": [
              "34b13b3f-6a9e-ffa7-f44f-660f0dcd9c27"
            ],
            "description": "In the `captureStderr` class closes the pipe output and input and duplicates the standard error stream to the new file descriptor 2, effectively stopping the capture of stderr.",
            "params": [],
            "returns": null,
            "name": "stopCapture",
            "location": {
              "start": 223,
              "insert": 224,
              "offset": " ",
              "indent": 8,
              "comment": {
                "start": 223,
                "end": 224
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 1
          }
        ]
      }
    }
  },
  {
    "name": "parallelwalk.py",
    "path": "pcplib/parallelwalk.py",
    "content": {
      "structured": {
        "description": "A class `ParallelWalk` that implements a parallel directory walking algorithm for MPI-based distributed computing environments. The class takes an MPI communicator as an argument and provides methods for processing files and directories encountered during the walk. The `Execute` method starts the walker, which gathers summary data from other ranks using the `gatherResults` method and then exits. The code uses MPI4py and os packages.",
        "items": [
          {
            "id": "1d882e73-6b37-a5b5-814f-b7b778a73940",
            "ancestors": [
              "148427dc-3ddb-43b8-0f42-d6f85d4b0a47"
            ],
            "description": "Initializes various instance variables, including rank, workers, next worker, color, token, first worker, work request, and items, as well as results parameter passed to the constructor.",
            "params": [
              {
                "name": "comm",
                "type_name": "Dup",
                "description": "Used to store the communication object for the worker."
              },
              {
                "name": "results",
                "type_name": "object",
                "description": "Initialized to none by default. It represents the results of the task that this class \nrepresents, which can be used later to retrieve the outcome of the task."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "comm = MPI.COMM_WORLD\nresults = []\nwalker = ParallelWalk(comm, results)\nwalker.ProcessDir(\"path/to/directory\")\n",
              "description": "\nIn this example, the end-user creates a `MPI` instance and initializes the `ParallelWalk` class with it. The walker then processes the directory specified by the user using the `ProcessDir()` method. The results of the walk are stored in the `results` list."
            },
            "name": "__init__",
            "location": {
              "start": 71,
              "insert": 72,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "readdir.py",
    "path": "pcplib/readdir.py",
    "content": {
      "structured": {
        "description": "A module that provides a convenient interface for calling the `readdir` system call, which allows reading the contents of a directory. The module uses the ctypes library to interact with the `readdir` function, which returns a list of structured `dirent` objects representing the files and directories in the directory. The code defines classes and functions to work with these objects and provide convenient access to their properties.",
        "items": [
          {
            "id": "9923c468-8ec2-37b7-b64e-4d65f224471c",
            "ancestors": [],
            "description": "Defines a structure for representing directory entry points, containing fields for inode number, offset, record length, type, and name.",
            "attributes": [
              {
                "name": "_fields_",
                "type_name": "ctypesPyStructSequence",
                "description": "Defined as a list of tuples, where each tuple contains the name of a field followed by its data type. The fields are: `ino_t`, `off_t`, `d_reclen`, `d_type`, and `d_name`."
              }
            ],
            "name": "_cdirent",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "14c7c332-98a7-22a8-a442-da2ace00bcaf",
            "ancestors": [],
            "description": "Is an extension of the `ctypes.Structure` class and provides attributes for representing different types of directory entries. It includes methods for setting and retrieving attributes, such as file type, name, and size.",
            "attributes": [
              {
                "name": "DT_UNKNOWN",
                "type_name": "int",
                "description": "0."
              },
              {
                "name": "DT_FIFO",
                "type_name": "1bit",
                "description": "0 or 1, indicating whether the directory entry is a FIFO (file-if-one-doesn't-exist)."
              },
              {
                "name": "DT_CHR",
                "type_name": "2bit",
                "description": "0 or 1 indicating whether the directory entry is a character special file."
              },
              {
                "name": "DT_DIR",
                "type_name": "4bit",
                "description": "10 in value, indicating that the directory entry is a directory."
              },
              {
                "name": "DT_BLK",
                "type_name": "6bit",
                "description": "1 of the 8 possible types of directories represented by this struct. It indicates whether the directory is a block device."
              },
              {
                "name": "DT_REG",
                "type_name": "8bit",
                "description": "14 in the summary."
              },
              {
                "name": "DT_LNK",
                "type_name": "10byte",
                "description": "Used to store the link target for a symbolic link."
              },
              {
                "name": "DT_SOCK",
                "type_name": "12bit",
                "description": "12-bit binary integer that represents a socket file."
              },
              {
                "name": "DT_WHT",
                "type_name": "14bit",
                "description": "0 by default, indicating that the file or directory is a whiteout."
              }
            ],
            "name": "dirent",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 18,
            "docLength": null
          },
          {
            "id": "26ac9759-77bf-4f95-494c-3c871d4c10c7",
            "ancestors": [
              "14c7c332-98a7-22a8-a442-da2ace00bcaf"
            ],
            "description": "Sets attributes of a `dirent` object, either by inheriting values from its parent `cdirent` object or by setting them to `None`.",
            "params": [
              {
                "name": "cdirent",
                "type_name": "object",
                "description": "Used to initialize the instance attributes of the class using the attribute names and values from an object."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "fc7ae56b-61aa-a1a1-8b48-493c61695124",
            "ancestors": [],
            "description": "Recursively reads and returns a list of directory entries in the specified directory.",
            "params": [
              {
                "name": "directory",
                "type_name": "str",
                "description": "Used to specify the directory to be searched for files or subdirectories."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of directory entry objects representing the contents of a directory."
            },
            "name": "readdir",
            "location": {
              "start": 59,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 59,
                "end": 61
              }
            },
            "item_type": "function",
            "length": 15,
            "docLength": 2
          }
        ]
      }
    }
  },
  {
    "name": "safestat.py",
    "path": "pcplib/safestat.py",
    "content": {
      "structured": {
        "description": "A function `safestat` that uses a while loop to retry an `os.lstat()` call if it fails with an `IOError`. The function wraps the `lstat` call in a try-except block to catch and handle interrupts, ensuring that the operation can be retried if necessary.",
        "items": [
          {
            "id": "5c31283f-277b-0c84-f94a-fdec5535fb35",
            "ancestors": [],
            "description": "Attempts to retrieve file metadata using the `os.lstat()` method, and returns the result if successful, or raises an exception if there is an error.",
            "params": [
              {
                "name": "filename",
                "type_name": "str",
                "description": "Used to represent the name of the file for which the file status is being checked."
              }
            ],
            "returns": {
              "type_name": "osStatData",
              "description": "A tuple containing information about the file or directory such as its size, permissions, and access time."
            },
            "name": "safestat",
            "location": {
              "start": 8,
              "insert": 9,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 8,
                "end": 10
              }
            },
            "item_type": "function",
            "length": 8,
            "docLength": 2
          }
        ]
      }
    }
  },
  {
    "name": "statfs.py",
    "path": "pcplib/statfs.py",
    "content": {
      "structured": {
        "description": "Bindings for the `statfs` function from the C standard library. It provides a way to query various metadata about a file system, such as its type, block size, blocks available, and more. The code uses the `ctypes` module to interface with the C library, allowing it to call C functions from Python. Specifically, it defines a `fstype` function that takes a path as input and returns the filesystem magic number for that path.",
        "items": [
          {
            "id": "149a6c97-ec21-ac85-0a47-d4344f1eb1c1",
            "ancestors": [],
            "description": "Defines a structure with two integer members, `val`.",
            "attributes": [
              {
                "name": "_fields_",
                "type_name": "ctypesc_int",
                "description": "2-element array of integers."
              }
            ],
            "name": "_fsid",
            "location": {
              "start": 11,
              "insert": 12,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "9bd5e200-b70f-b18f-434a-4adc2d31da22",
            "ancestors": [],
            "description": "Defines a structure for storing file system statistics, including information about files and blocks.",
            "attributes": [
              {
                "name": "_fields_",
                "type_name": "ctypesc_long",
                "description": "A list of field names for the struct statfs, including f_type, f_bsize, f_blocks, and more."
              }
            ],
            "name": "_struct_statfs",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 15,
            "docLength": null
          },
          {
            "id": "67f2c2ef-3588-738f-2b4d-456eb16a662f",
            "ancestors": [],
            "description": "1. Calls the `_struct_statfs` function to retrieve file system information.\n2. Passes the path to be checked to the `_statfs` function.\n3. Returns the file type based on the information retrieved.",
            "params": [
              {
                "name": "path",
                "type_name": "str",
                "description": "Used to specify the path to be statfs-ed."
              }
            ],
            "returns": {
              "type_name": "ctypesbyrefdataf_type",
              "description": "An instance of a struct representing file system information, specifically the file type (e.g., regular file, directory, etc.)."
            },
            "name": "fstype",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 39,
                "end": 40
              }
            },
            "item_type": "function",
            "length": 4,
            "docLength": 1
          }
        ]
      }
    }
  },
  {
    "name": "test.py",
    "path": "pcplib/test.py",
    "content": {
      "structured": {
        "description": "Several classes and functions that perform various tasks, such as displaying information about an object, calculating statistics, and performing mathematical operations. The top-level function `top_level_function` takes two arguments, `x` and `y`, and returns a dictionary with the results of multiplying `x` and `y`, as well as checking if the result is greater than 10. Another function, `simple_function`, takes three arguments, `message`, `repeat`, and `uppercase`, and returns a modified version of the input message based on these arguments. The code also includes an example of using the functions to calculate statistics and display information about an object.",
        "items": [
          {
            "id": "357d79ec-379e-63be-5a4b-7a41a8bc7962",
            "ancestors": [],
            "description": "Has three methods: `__init__`, `greet`, and `calculate_statistics`. The `__init__` method initializes instance variables, while `greet` returns a personalized greeting. `calculate_statistics` computes and returns statistical information about the data.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized in the `__init__` method with the parameter `name`. It stores the name value passed in the constructor."
              },
              {
                "name": "data",
                "type_name": "object",
                "description": "Initialized with a value passed to the `__init__` method."
              }
            ],
            "name": "SampleClass",
            "location": {
              "start": 2,
              "insert": 3,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 42,
            "docLength": null
          },
          {
            "id": "4dbca07b-66b1-d898-134a-71e3014061f8",
            "ancestors": [
              "357d79ec-379e-63be-5a4b-7a41a8bc7962"
            ],
            "description": "Initializes an instance of the `SampleClass` by setting the `name` and `data` attributes to the input parameters passed during object creation.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to the attribute `name` upon initialization, storing the value provided by the caller."
              },
              {
                "name": "data",
                "type_name": "object",
                "description": "Used to initialize an instance variable named `data`."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 3,
              "insert": 4,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6421c387-44a1-a2ac-8d42-f3cfde262618",
            "ancestors": [
              "357d79ec-379e-63be-5a4b-7a41a8bc7962"
            ],
            "description": "Calculates various summary statistics (sum, count, mean, and median) for a list of values contained within an instance of the `SampleClass` object.",
            "params": [],
            "returns": {
              "type_name": "dict",
              "description": "4-element: sum, count, mean and median of an array or list data."
            },
            "name": "calculate_statistics",
            "location": {
              "start": 10,
              "insert": 11,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "acf2cc27-3160-3b82-1f4c-a2a47a1bed13",
            "ancestors": [
              "357d79ec-379e-63be-5a4b-7a41a8bc7962"
            ],
            "description": "Calculates and displays statistical information about a sample of data represented by an instance of `SampleClass`.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "A string containing information about the data, including name, count, mean, and median."
            },
            "name": "display_info",
            "location": {
              "start": 32,
              "insert": 33,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "2e90ed4a-acde-11ba-1a44-9510f7af6424",
            "ancestors": [],
            "description": "Takes two arguments `x` and `y`, defines a nested function `nested_function`, calculates the sum and product of `x` and `y`, and returns a dictionary with four keys: `sum`, `product`, `status`, and `product_status`.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "Passed as an argument to the nested `nested_function` function."
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "Used in the calculation of the sum result."
              }
            ],
            "returns": {
              "type_name": "Python",
              "description": "A dictionary containing four key-value pairs: `sum`, `product`, `status`, and `product_status`."
            },
            "name": "top_level_function",
            "location": {
              "start": 46,
              "insert": 47,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 23,
            "docLength": null
          },
          {
            "id": "7fc2dd8b-6893-549d-b242-c085ac20d62b",
            "ancestors": [],
            "description": "Takes a message and an optional repeat and uppercase parameter, repeats the message with the given repeat value, strips the resulting string, and returns it with the specified case if enabled.",
            "params": [
              {
                "name": "message",
                "type_name": "str",
                "description": "Used to hold a string value that will be repeated and manipulated during the function's execution."
              },
              {
                "name": "repeat",
                "type_name": "int",
                "description": "Used to specify the number of times the passed message is concatenated with the space character before returning the final message."
              },
              {
                "name": "uppercase",
                "type_name": "bool",
                "description": "Used to determine if the final message should be made uppercase or not."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A string that represents the concatenation of the input message and a specified repetition count, followed by stripping and possibly capitalizing the resulting string."
            },
            "name": "simple_function",
            "location": {
              "start": 71,
              "insert": 72,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 8,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "setup.py",
    "path": "setup.py",
    "content": {
      "structured": {
        "description": "A build tool named `mybuild_py` that extends the `build` class from `setuptools`. The tool updates the version number of the package based on the current git repository or the distribution tarball, and then builds the `pcplib` package by generating a shared library for liblustreapi if necessary. Finally, it sets up the package metadata and creates an executable script named `pcp`.",
        "items": [
          {
            "id": "6ba2cdc6-d6aa-84bb-9a41-da60d4228031",
            "ancestors": [],
            "description": "Updates the version number in a Python project by checking if it's a Git repository, running `git describe` command if it is, or checking the version number from distribution files if not. It then prints the updated version number and returns it.",
            "params": [],
            "returns": {
              "type_name": "str",
              "description": "The current version of the software."
            },
            "name": "update_version",
            "location": {
              "start": 19,
              "insert": 20,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 19,
                "end": 23
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "161f5c04-5669-eb91-3440-89999bce60bc",
            "ancestors": [],
            "description": "Checks for the presence of the `liblustreapi` shared or static library on the system, and copies it to the `pcplib` directory if not found.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "Not captured or defined."
            },
            "name": "build_liblustre",
            "location": {
              "start": 57,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 57,
                "end": 59
              }
            },
            "item_type": "function",
            "length": 50,
            "docLength": 2
          },
          {
            "id": "045442ac-04e1-f2b5-5f45-96f6925297b1",
            "ancestors": [],
            "description": "1) extracts the liblustreapi.a library, 2) compiles it into a shared library (.so), and 3) loads the resulting library into memory using ctypes.",
            "params": [
              {
                "name": "lib_location",
                "type_name": "str",
                "description": "Used to specify the location of the `liblustreapi.a` library file."
              }
            ],
            "returns": null,
            "name": "convert_liblustre",
            "location": {
              "start": 115,
              "insert": 116,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 115,
                "end": 119
              }
            },
            "item_type": "function",
            "length": 28,
            "docLength": 4
          },
          {
            "id": "29ff8af1-c089-6499-d64f-8d619b810958",
            "ancestors": [],
            "description": "Performs two functions: calling `build_liblustre()` and delegating to `run()`.",
            "attributes": [],
            "name": "mybuild_py",
            "location": {
              "start": 150,
              "insert": 151,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ae51270f-3420-0d83-4046-232a10aa9c49",
            "ancestors": [
              "29ff8af1-c089-6499-d64f-8d619b810958"
            ],
            "description": "Of `mybuild_py` class invokes the `build.run()` method, passing `self` as argument, to execute the build process.",
            "params": [],
            "returns": null,
            "name": "run",
            "location": {
              "start": 151,
              "insert": 152,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]